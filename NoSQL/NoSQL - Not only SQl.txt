NoSQL - Not only SQl
=> database with flexibility
=> database with scalability
=> database with high availability

SQl vs NoSQL
1. Schema(SQL) - Fixed and predefined
   Schema(NoSQL) - Flexible, Schema-less

2. Scalability(SQL) - Vertically(adding more power to single server)
   Scalability(NoSQL) - Horizontally(adding more servers)

3. Data Storage(SQL) - Structured tables with rows and columns
   Data Storage(NoSQL) - key-value, document, graph, wide-columns

4. Query language(SQL) - SQL (Structured query language)
   Query language(NoSQL) - Varies (No standard query language)

5. ACID compliance (SQL) - Strong ACID compliance
   ACID compliance (NoSQL) - relaxed for high scalability (Some NoSQL DBs support ACID)

6. Best for(SQL) - Structured data with relationships (banking,erp.)
   Best for(NoSQL) - Unstructured or semistructured (IOT,social media)

Types of NoSQL Database -
1. Key-value Stores(eg. Redis, DynamoDB) - 
	-> Simple key-value pairs(like dictionary)
	-> used in caching, session management

2. Document Stores(eg. MongoDB, CouchDB)
	-> JSON-like documents(flexible schema)
	-> Content management, catalogs
	
3. Graph Database(eg. Neo4j, ArangoDB)
	-> Nodes and edges for relationships
	-> fraud detection, social networks

4. Wide columns stores(eg. Cassandra,HBase)
	-> Tables with flexible columns
	-> Big data, time-series data


When to use NoSQl vs Relational database?
We can us NSQl -
	1. We need high scalability
	2. Distibuted architecture
	3. Data structure changes rquently
	4. We reuire high-speed read/write opeations
We can use Relational database
	1. Data integrity  and consistency is critical
	2. We need complex queries and transaction

Redis -
	1. Its open source
	2. It has a free version
	3. It is easy to install and can be used locally
	4. No clou dependency
	5. It is fast (stored data in memory)
	6. Can be used for caching, session storage, real-tim analytics

mac - 
brew install redis
brew services start redis

start redis command line interface - 
redis-cli

Redis is in-memory data structure store that can be used as a database, cache, and message broker. 
It supports multiple data structure such as -
1. Strings
2. Hashes
3. Lists
4. Sets
5. Stored Sets
6. Bitmaps
7. Geospatial indexes
8. HyperLogLogs

Use cases
1. Session storage - websites use redis to store user session data for fast retrieval
2. Caching - Frequently accessed data can be stored in redis to reduce database queries
3. Real-time messaging - chat applications use redis as a message broker


Features -
1. In-memory storage - data stored in RAM, making read and write operations extremely fast
2. Persistence - Redis provides option to dump data to disk.
3. Data structure - supports strings, hashes , lists..
4. Replication - Master-slave replication allows data to be copied to multiple servers.
5. Pub/Sub Messaging - Redis can act as a message broker with its publish/subscribe mechanism


NoSQL - DynamoDB and Redis

Similaraties
1. Both are NoSQL database
2. Both uses Key-Value store
3. Both are High scalable
4. Both are optimized for fast read/writes but Redis can be used for ultra-fast read/writes
5. AWS DynamoDB (fully managed) , AWS ElastiCache for Redis(Managed)
6. Both supports Replication
7. Both supports caching (Redis have buil-in caching by default)

Differences -
1. DynamoDB is a persistent NoSQL Database as it stores data persistently on SSDs
   Redis is In-memory data store as it stores data in RAM (Optional persistent)
2. DynamoDB is schema less, supports key-value and document storage
   Redis supports key-value and various data structure (Lists, Hashes, Sets, Sorted sets etc.)
3. DynamoDB supports complex queries(indexes, filtering, conditional updates)
   Redis primarily key-based lookup
4. DynamoDB has millisecond latency (good for large-scale applications)
   Redis has microsecond latency (extremely fast reads/writes)
5. DynamoDB is always persistent
   Redis is by default volatile, but can be persisted
6. DynamoDB supports ACID transactions
   Redis supports basic transactions
7. DynamoDB - Large scale applications requiring reliable persistent storage
   Redis - Application needing fast in-memory access


Use cases of DynamoDB -
1. E-commerce order management - to store users orders and track inventory
2. User Profiles & Metadata - user preferences, game progress, session history
3. IOT data storage - capture sensor data from IOT device
4. Financial transaction - For ledger based systems where data consistency is important

Use cases of Redis -
1. Caching API responses - Cache frequently accessed API responses to reduce database load. ex- a news website caches trending artilcles
2. session management - store user session for quick authentication. Ex- A login system stores session tokens in redis for quick lookup
3. Real time leaderboards - uses Sorted sets to track top players dynamically.
4. Rate limiting - Limit the number of requests per user (API rate limiting). ex- An API allows only 100 requests per minute per user
5. Pub/Sub messaging - Redis can act as a message broker for real time chat applications. ex. A stock trading platform sends price updates via redis pub/sub.



data structures -
1. String
set name "Ajay"
set age 22
get name
get age
set counter 10
incr counter
decr counter
append name "Sharma"

Use case 1 - User login token
* Lets say user Id is 123, and their token is "abc123"
set user:123:token "abc123"
get user:123:token
* This is like saving a small piece of data (the login token) for a user
* In any web/mobile app where users log in.
	* When a user logs in, the app generates a session token or JWT token to remember them.
	* This token is stored in Redis for quick lookup.
Why Redis?
	* Redis is super fast (in-memory).
	* Ideal for checking if a token is valid without hitting a slow database.
Example:
	* You open Amazon on your phone.
	* The app sends your token to the server.
Server checks:
	* GET user:your_user_id:token
	* If valid, you're logged in. If expired or not found, you're asked to log in again.

Use Case 2: Page View Counter
You want to count how many times the homepage is viewed.
We'll use a counter key like page:home:views.
	* INCR page:home:views
	* INCR page:home:views
	* GET page:home:views


Use Case 3: Cache API Result with Expiry
You want to cache weather data that expires after 1 hour.
Save "sunny" weather info for Delhi, with auto-expiry in 3600 seconds (1 hour).
	* SET weather:delhi "sunny" EX 3600
	* GET weather:delhi
	* TTL weather:delhi

======================================================================================

2. Hashes - hashes let you store multiple fields under a single key. Good for storing objects like a user profile
	* HSET user:1001 name "joy" age "22" email "joy@abc.com"
	* HGET user:1001 name
	* HGETALL user:1001
	* HGET user:1001 age
	* HDEL user:1001 age
	* HSET user:1001 age "31"

Use case 1 - You're building a user profile for a web app
	* You want to store - name , city
		* HSET user:123 name "Alice" city "Mumbai"
	* Get one field - name
		* HGET user:123 name
	* Get full profile
		* HGETALL user:123

Use case 2 - You're building a e-commerce app and want to cache product details.
	* Store : Price, Stock
		* HSET product:900 price "2500" stock "20"
	* Check product price
		* HSET product:900 stock "19"
	* Get complete product info
		* HGETALL product:900

use case 3 - Store app settings/Config
	* You want to store application-wide settings, like theme or font style
	* Add config
		* HSET settings:app theme "dark" font "arial"
	* Read one setting
		* HGET settings:app theme
	* Change the setting
		* HSET settings:app theme "light"
	* view all settings
		* HGETALL settings:app

======================================================================================

3. Lists - 
	* An ordered collection of string
	* It is like a queue or a to-do list
	* We can push or pop items from the left or right
	* Redis Lists are automatically created when you add your first item.
	
		* LPUSH mylist "item1"
		* LPUSH mylist "item2"
		* LPUSH mylist "item3"

	* To view full list
		* LRANGE mylist 0 -1

	* RPUSH mylist "item4"
		* RPUSH mylist "item4"

	* Remove from left
		* LPOP mylist

	* Remove from right
		* RPOP mylist

	* Get specific item 
		* LINDEX mylist 1

	* Trim list to specific length
		* LTRIM mylist 0 1


Use case 1 - Recent user activities
	* Store the last 5 things a user did on your app (clicked a button, watch a video etc..)
	* Push recent actions to the list
		* LPUSH user:123:activities "watched_video"
		* LPUSH user:123:activities "clicked_profile"
		* LPUSH user:123:activities "liked_post"

	* Check the list
		* LRANGE user:123:activities 0 -1

	* keep only the last 5 actions
		* LTRIM user:123:activities 0 4


Use case 2 - Task queues/ Background jobs
	* Apps may have background jobs (like sending emails, processing uploads). We can queue them with redis lists
	* Push jobs to queue
		* RPUSH task_queue "send_email:101"
		* RPUSH task_queue "generate_pdf:102"

	* Worker pulls the next job
		* LPOP task_queue


Use case 3 - Chat message queue
	* in a chat app, we want to store recent message between users
	* add messages
		* RPUSH chat:alice:bob "Hi Bob!"
		* RPUSH chat:alice:bob "How are you?"

	* get all messages
		* LRANGE chat:alice:bob 0 -1

	* get last message only
		* LINDEX chat:alice:bob -1

======================================================================================

4. Set-
	* An unordered collection of unique strings (no duplicates allowed)
	* it can be useful when we need to check membership, remove duplicates,
	  or do set operations like union, intersection and difference
	* create a set
		* sadd myset "apple"
		* sadd myset "oranges"
		* sadd myset "cherry"
		* sadd myset "apple"

	* view all members of a set
		* smembers myset

	* check if an item exists
		* sismember myset "apple"

	* remove an item
		* srem myset "apple"

	* get number of items
		* scard myset

	* Set Operations (with two sets)
		* sadd set1 "apple" "banana" "cherry"
		* sadd set2 "banana" "cherry" "date"

	* Intersection (common items)
		* sinter set1 set2

	* Union (all unique items)
		* sunion set1 set2

	* difference (items in set1 but not in set2)
		* sdiff set1 set2


Use case 1 - Track Unique visitors to a website
	* Add user IDs to a daily set
		* sadd visitors:2025-04-08 "users1"
		* sadd visitors:2025-04-08 "users2"
		* sadd visitors:2025-04-08 "users3"
		* sadd visitors:2025-04-08 "users1"

	* Check how many visitors
		* scard visitors:2025-04-08

	* See all unique visitors
		* smembers visitors:2025-04-08


Use case 2 - Find common interests between users
	* Store each user's interest in a set
		* sadd user:rahul:interests "hiking" "music" "reading"
		* sadd user:rajiv:interests "reading" "gaming" "music"

	* Find common interest
		* sinter user:rahul:interests user:rajiv:interests

	* Find interest that user1 has but user2 doesn't
		* sdiff user:rahul:interests user:rajiv:interests

Use case 3 - Tagging System - (Blog or Product)
	* Tag articles/products
		* sadd tag:python "article1" "article2"
		* sadd tag:ai "article2" "article3"

	* Find article with both python and ai
		* sinter tag:python tag:ai

	* find article with either tag
		* sunion tag:python tag:ai

======================================================================================

5. Sorted set (ZSET)-
	* Stores unique elements
	* Each element is associated with a numeric score
	* Items are always sorted by score (ascending)

	* Create a sorted set
		* zadd leaderboard 100 "Ajay"
		* zadd leaderboard 200 "Rajiv"
		* zadd leaderboard 150 "Jai"
	
	* View sorted set
		* zrange leaderboard 0 -1 withscores

	* View sorted set (Highest first. Descending order)
		* zrevrange leaderboard 0 -1 withscores

	* View score of an element
		* zscore leaderboard "Rajiv"

	* Increment a score
		* zincrby leaderboard 50 "Rajiv"

	* get the rank of player
		* zrank leaderboard "Rajiv"


Use case 1 - Track most viewed articles
	* add articles as sorted set
		* zadd article:view 20 "article:redis"
		* zadd article:view 100 "article:ai"
		* zadd article:view 120 "article:ml"

	* show most popular article
		* zrevrange article:view 0 0 withscores	

	* increment view count
		* zincrby article:view 1 "article:redis"


Use case 2 - Time based sorted data (post or events)
	* Store the fee posts by timestamp
		* zadd feed:user123 172499000 "post1"
		* zadd feed:user123 172502000 "post2"
		* zadd feed:user123 172490000 "post3"
	
	* show laest post
		* zrevrange feed:user123 0 0

Use case 3 - task scheduling (Priotity Queue)
	* Define sorted set elements using score to set priority or execution time.
		* zadd tasks 1 "email:send"
		* zadd tasks 5 "cleanup:temp"
		* zadd tasks 3 "generate:report"
	
	* Fetch next task to run (lowest score = highest priority)
		* zrange tasks 0 0

	* Remove task after completion
		* zrem tasks "email:send"

======================================================================================

6 Bitmaps -
	* bitmap is way to store binary data (1s or 0s) using bit operations
	* used to track presence, activity or status using minimal memory
	* internally, Redis stores this using Strings, but allows bit-level operations.

	* set a bit - setbit key offset value
		* offset - position
		* value 1(True/active) or 0(false/inactive)

		* setbit user:active 1 1 
		* setbit user:active 3 1 
		* setbit user:active 7 1

	* get a bit 
		* getbit user:active 1
		* getbit user:active 2

	* Count set bits
		* bitcount user:active

	* Use with Dates (daily logging tracking)
		* setbit login:2025-04-07 123 1
		* setbit login:2025-04-07 128 1
		* setbit login:2025-04-08 123 1
		* setbit login:2025-04-08 128 1
		* setbit login:2025-04-08 129 1

	* Bitwise operations - combine multiple bitmaps (users active on two multiple days)
		* bitop and login:both login:2025-04-07 login:2025-04-08
		* bitcount login:both


Use Case 1 - Track if a user logged in on a specific day
	* We run an app with userIDs starting from 0 to say, 1000.
	* We want to know-
		* Who logged in on a specific day?
		* How many users logged in today?
		* Did a specific user log in on a certain day?

	* Track logins (setbit)
		* setbit login:2025-04-08 101 1
		* setbit login:2025-04-08 202 1
		* setbit login:2025-04-08 305 1

	* Check if a specific user logged in (getbit)
		* getbit login:2025-04-08 101
		* getbit login:2025-04-08 500

	* Count total users who logged in (bitcount)
		* bitount login:2025-04-08

	* Track login on another day (April 7) (setbit)
		* setbit login:2025-04-07 101 1
		* setbit login:2025-04-07 500 1

	* Find users who logged in on both days (bitop and)
		* bitop and login:both login:2025-04-07 login:2025-04-08
		* bitcount login:both

	* Find users who logged in atleast one day (bitop or)
		* bitop or login:any login:2025-04-07 login:2025-04-08
		* bitcount login:any



Use case 2 - Simulate a feature flag system using Redis bitmaps where we can enable or disable features (like dark mode) for specific users in memory efficient way.
	* Keep track of which user have dark mode enabled using bitmaps
	* bitmaps store 0 or 1 at a specific bit offset
	* each bit position represents a user id
	* very fast and compact for Boolean flags across millions of users


	* Enable dark mode for users 1,2 and 5
		* setbit feature:darkmode 1 1
		* setbit feature:darkmode 2 1
		* setbit feature:darkmode 5 1

	* Check if a user has dark mode enabled
		* getbit feature:darkmode 1

	* Disable dark mode for a user
		* setbit feature:darkmode 2 0

	* Count how many users have dark mode enabled
		* bitcount feature:darkmode

	* List all users with dark mode ON
		* redis bitmap don't store keys like sets, so to scan we can do like this
		* for user_id in range(0,1000):
			if redis.getbit("feature:darkmode" , user_id) == 1:
				print(f"Dark mode ON for user {user_id}")

======================================================================================

7. Geospatial indexes - Redis has inbuilt support to store geolocation data (longitude & latitude)
	* How far two locations are
	* What locations are within a certain radius
	* Coordinates of a place
	* Sorting places by distance
	* geoadd - add any location(lat,lon) to key
	* geodist - find distance between 2 members
	* georadius/geosearch - find places near a location
	* geohash - get geohash string
	* geopos - get latitude and longitud of a member


	* Add some location
		* geoadd <key> <longitude> <latitude> <member>
		* geoadd stores 77.5956 12.9716 banglore
		* geoadd stores 72.8777 19.0716 mumbai
		* geoadd stores 88.3639 22.5726 kolkata
		* geoadd stores 78.4867 17.3850 hyderabad

	* find distance betwen two cities - km, mi, m ft
		* geodist stores banglore mumbai km

	* find store within 500 km of bangalore
		* geosearch stores fromlonlat 77.5956 12.9716 byradius 500 km

	* get exact coordinates of city
		* geopos stores kolkata

	* find out nearby places sorted by distance
		* geosearch stores fromlonlat 77.5956 12.9716 byradius 1000 km asc withdist



	* simulate for food delivery app
	* add delivery agents with their current location - Delhi (latitude - 28.6139, longitude - 77.2090)
		* geoadd agents 77.2090 28.6139 agent1
		* geoadd agents 77.2100 28.6145 agent2
		* geoadd agents 77.2200 28.6200 agent3
		* geoadd agents 77.2300 28.6000 agent4


	* Find agent within 3km radius of the customer - 77.2105,28.6150
		* geosearch agents fromlonlat 77.2105 28.6150 byradius 3 km asc withdist

	* Assign the nearest agent - will be handled by backend system

	* get exact coordinates of an agent
		* geopos agents agent1

	* track how far the agent is from customer
		* geoadd agents 77.2105 28.6150 customer
		* geodist agents agent2 customer km

======================================================================================
8. HyperLogLog - A probabilistic data structure used to estimate the number of unique elements (cardinality) in a set.
	* Very memory efficient (uses less the 12 kb even for millions of items)
	* Tradeoff : Not 100% accurate (usually 1 % error)
	* Uses - 
		* Count unique visitors to a website  => track by IPs or user IDs
		* count unique search queries       => store queries in hyperloglog
		* Count daily active users (DAU)    => add user IDs per day
		* Count unique emails opened        => add user IDs/email IDs
	* commands
		* pfadd key element       - add one or more elements to a hyperloglog
		* pfcount key             - return estimated number of unique elements
		* pfmerge dest key1 key2  - merge multiple hyperloglog into one

	* Add some users (Simulate user IDs)
		* pfadd unique_visitors:2025-04-07 users1
		* pfadd unique_visitors:2025-04-07 users2
		* pfadd unique_visitors:2025-04-07 users3
		* pfadd unique_visitors:2025-04-07 users1
	
	* Get the estimated count
		* pfcount unique_visitors:2025-04-07

	* Add more users
		* pfadd unique_visitors:2025-04-07 users4 users5 users6
		* pfcount unique_visitors:2025-04-07

	* Track over multiple days and merge them
		* pfadd unique_visitors:2025-04-06 users2 users3 users7
		* pfmerge total_visitors:week1 unique_visitors:2025-04-06 unique_visitors:2025-04-07
		* pfcount total_visitors:week1


Use case 1 -Track Daily Active Users (DAU)
	* Count unique users who opened your app each day, without using too much memory
	* Let's say users log in to your app on April 8 and April 9,2025.

	* User open the app - simulate adding user IDs like user101, user102 etc
		pfadd dau:2025-04-08 user101
		pfadd dau:2025-04-08 user102
		pfadd dau:2025-04-08 user103
		pfadd dau:2025-04-08 user104

		pfadd dau:2025-04-09 user104
		pfadd dau:2025-04-09 user102
		pfadd dau:2025-04-09 user105
		pfadd dau:2025-04-09 user106

	* Count unique users each day
		pfcount dau:2025-04-08

		pfcount dau:2025-04-09

	* Get Weekly or Monthly Unique users - merge data for multiple days 
		pfmerge dau:week1 dau:2025-04-08 dau:2025-04-09
		pfcount dau:week1


#Autmoating in backend
* each time a user logs in or opens the app, you run -
	* redis.pfadd(f"dau:{today}", user_id)
* at midnight or weekly merge
	* redis.pfmerge("dau:week1" , "dau:2025-04-01" , “dau:2025-04-02”, ....., “dau:2025-04-07”)

#Benfits - Use just 12kb of memory per day (even for millions of users), super fast, easily scalable


























	











































